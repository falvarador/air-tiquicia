@page "/search-flights/{departure}/{arrival}/{departureDate:datetime}/{returnDate:datetime}/{passengers:int}"

@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

@layout LandingLayout

<style @scope>
    .pointer {
        cursor: pointer;
    }
</style>

<section class="title-section">
    <h3>Vuelos disponibles</h3>
    @* <button class="btn btn-sm btn-success" @onclick="Add">???</button> *@
</section>
<hr />

<table class="table">
    <thead>
        <tr>
            <th scope="col">Número</th>
            <th scope="col">Duración</th>
            <th scope="col">Fecha de salida</th>
            <th scope="col">Fecha de llegada</th>
            <th scope="col">Hora de salida</th>
            <th scope="col">Hora de llegada</th>
            <th scope="col">Price</th>
        </tr>
    </thead>
    <tbody>
        @if (!Flights.Any())
        {
            <text>No existen registros que mostrar.</text>
        }
        else
        {
            @foreach (var flight in Flights)
            {
                <tr class="pointer" @onclick=@(() => View(flight.Number))>
                    <td>@flight.Number</td>
                    <td>@flight.DurationHours:@flight.DurationMinutes horas</td>
                    <td>@flight.DepartureDate.ToShortDateString()</td>
                    <td>@flight.ArrivalDate.ToShortDateString()</td>
                    <td>@flight.DepartureHours:@flight.DepartureMinutes</td>
                    <td>@flight.ArrivalHours:@flight.ArrivalMinutes</td>
                    <td>$ @flight.Price</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string Departure { get; set; }
    [Parameter]
    public string Arrival { get; set; }
    [Parameter]
    public DateTime DepartureDate { get; set; }
    [Parameter]
    public DateTime ReturnDate { get; set; }
    [Parameter]
    public int Passengers { get; set; }
    private IEnumerable<FlightDto> Flights { get; set; }

    public SearchFlight()
    {
        Departure = string.Empty;
        Arrival = string.Empty;
        DepartureDate = DateTime.Now;
        ReturnDate = DateTime.Now;
        Flights = new List<FlightDto>();
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadInitialValues();
    }

    private void View(string number)
    {
        navigationManager.NavigateTo($"/passengers/add/{number}");
    }

    private async Task LoadInitialValues()
    {
        Flights = await
        httpClient.GetFromJsonAsync<IEnumerable<FlightDto>>($"api/flights/search/{Departure}/{Arrival}/{DepartureDate.ToString("yyyy-MM-dd")}/{ReturnDate.ToString("yyyy-MM-dd")}/{Passengers}")
        ?? Enumerable.Empty<FlightDto>();
    }
}
