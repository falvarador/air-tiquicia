@page "/crews/add"
@page "/crews/add/{id}"

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<EditForm Model="Crew" OnValidSubmit="SubmitForm">
    <section class="title-section">
        <h3>Tripulación</h3>
        <button class="btn btn-sm btn-success" type="submit">
            @(string.IsNullOrEmpty(id) ? "Agregar" : "Editar")
        </button>
    </section>
    <hr />

    <DataAnnotationsValidator />
    <ValidationSummary />

    <aside class="mb-3">
        <label for="description" class="form-label">Descipción</label>
        <input autocomplete="off" type="text" class="form-control" id="description" @bind="Crew.Description" />
    </aside>
</EditForm>

@code {
    [Parameter]
    public string id { get; set; }
    private CrewDto Crew { get; set; }

    public CrewForm()
    {
        id = string.Empty;
        Crew = new CrewDto();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(id))
        {
            await LoadInitialValues(id);
        }
    }

    public async Task SubmitForm()
    {
        if (string.IsNullOrEmpty(id))
            await Add();
        else
            await Edit();
    }

    private async Task Add()
    {
        var response = await httpClient.PostAsJsonAsync("api/crews", Crew);
        if (response.IsSuccessStatusCode)
        {
            await response.Content.ReadAsStringAsync();
            navigationManager.NavigateTo("/crews");
        }
    }

    private async Task Edit()
    {
        var response = await httpClient.PutAsJsonAsync("api/crews", Crew);
        if (response.IsSuccessStatusCode)
        {
            await response.Content.ReadAsStringAsync();
            navigationManager.NavigateTo("/crews");
        }
    }

    private async Task LoadInitialValues(string id)
    {
        var response = await httpClient
        .GetFromJsonAsync<IEnumerable<CrewDto>>($"api/crews/{id}");

        Crew = response?.FirstOrDefault() ?? new CrewDto();
    }
}
